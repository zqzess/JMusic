package com.lib_dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lib_dao.bean.PlayListInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_LIST_INFO".
*/
public class PlayListInfoDao extends AbstractDao<PlayListInfo, Long> {

    public static final String TABLENAME = "PLAY_LIST_INFO";

    /**
     * Properties of entity PlayListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MusicId = new Property(1, long.class, "musicId", false, "MUSIC_ID");
        public final static Property SongName = new Property(2, String.class, "songName", false, "SONG_NAME");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property ArtistId = new Property(4, long.class, "ArtistId", false, "ARTIST_ID");
        public final static Property Album = new Property(5, String.class, "album", false, "ALBUM");
        public final static Property AlbumPic = new Property(6, String.class, "albumPic", false, "ALBUM_PIC");
        public final static Property MusicLink = new Property(7, String.class, "musicLink", false, "MUSIC_LINK");
        public final static Property AlbumId = new Property(8, long.class, "albumId", false, "ALBUM_ID");
        public final static Property IsMv = new Property(9, int.class, "isMv", false, "IS_MV");
        public final static Property Form = new Property(10, String.class, "form", false, "FORM");
    }


    public PlayListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PlayListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_LIST_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MUSIC_ID\" INTEGER NOT NULL ," + // 1: musicId
                "\"SONG_NAME\" TEXT," + // 2: songName
                "\"ARTIST\" TEXT," + // 3: artist
                "\"ARTIST_ID\" INTEGER NOT NULL ," + // 4: ArtistId
                "\"ALBUM\" TEXT," + // 5: album
                "\"ALBUM_PIC\" TEXT," + // 6: albumPic
                "\"MUSIC_LINK\" TEXT," + // 7: musicLink
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 8: albumId
                "\"IS_MV\" INTEGER NOT NULL ," + // 9: isMv
                "\"FORM\" TEXT);"); // 10: form
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_LIST_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayListInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMusicId());
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
        stmt.bindLong(5, entity.getArtistId());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(6, album);
        }
 
        String albumPic = entity.getAlbumPic();
        if (albumPic != null) {
            stmt.bindString(7, albumPic);
        }
 
        String musicLink = entity.getMusicLink();
        if (musicLink != null) {
            stmt.bindString(8, musicLink);
        }
        stmt.bindLong(9, entity.getAlbumId());
        stmt.bindLong(10, entity.getIsMv());
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(11, form);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayListInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMusicId());
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
        stmt.bindLong(5, entity.getArtistId());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(6, album);
        }
 
        String albumPic = entity.getAlbumPic();
        if (albumPic != null) {
            stmt.bindString(7, albumPic);
        }
 
        String musicLink = entity.getMusicLink();
        if (musicLink != null) {
            stmt.bindString(8, musicLink);
        }
        stmt.bindLong(9, entity.getAlbumId());
        stmt.bindLong(10, entity.getIsMv());
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(11, form);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlayListInfo readEntity(Cursor cursor, int offset) {
        PlayListInfo entity = new PlayListInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // musicId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // songName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.getLong(offset + 4), // ArtistId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // album
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // albumPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // musicLink
            cursor.getLong(offset + 8), // albumId
            cursor.getInt(offset + 9), // isMv
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // form
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayListInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMusicId(cursor.getLong(offset + 1));
        entity.setSongName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtistId(cursor.getLong(offset + 4));
        entity.setAlbum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMusicLink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAlbumId(cursor.getLong(offset + 8));
        entity.setIsMv(cursor.getInt(offset + 9));
        entity.setForm(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlayListInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlayListInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlayListInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
